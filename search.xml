<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js数组一些常用方法]]></title>
    <url>%2F2019%2F05%2F17%2Farray%2F</url>
    <content type="text"><![CDATA[indexOf()//方法 // 查找成员 返回索引 arr.indexOf() // example var arr=[1,2,3,4] arr.indexOf(2); //返回1（当前索引） // 低版本兼容 if (!Array.indexOf){ Array.prototype.indexOf=function(obj){ var i=this.length; while(i-=1){ if(this[i]==obj){ return i; } }return -1; } }]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端布局——flex(常用)]]></title>
    <url>%2F2019%2F05%2F17%2Fflex%2F</url>
    <content type="text"><![CDATA[flex布局display:flex; // flex默认会强制一行 flex不强制一行display:flex;flex-wrap: wrap; //flex 不强制一行 也能使用flex的特性 flex子容器的排序方式display:flex;flex-direction:column; //子容器排列方式 column（上下） column-reverse（下上） inherit（默认） initial(从左往右) row(从左往右) row-reverse（从右往左） flex居中方式display:flex;//横向(flex布局中 元素与容器等同)justify-content: center; center （类似 text-align:center）；justify-content:flex-start （ 类似 text-align:left）；justify-content:flex-end（ 类似 text-align:right）；justify-content:space-between（两端对齐 两个元素就是左浮动 右浮动）justify-content:space-around(两端间对齐) //纵向 (flex布局中 元素与容器等同)align-items:stretch; （默认）align-items: center 纵向居中 （子容器，子元素 的纵向居中）align-items:flex-start; （上对齐，和默认差不多）align-items:flex-end; （下对齐）]]></content>
      <categories>
        <category>css3</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue部分知识点以及一些配置]]></title>
    <url>%2F2019%2F05%2F13%2FvueBiography%2F</url>
    <content type="text"><![CDATA[vue路由动态传参12345678910111213141516171819202122// 1.通过prams传参（不会显示在url上面）this.$router.push(&#123; name: 'index', //路由中配置的name params: &#123; id: id &#125;&#125;)//通过this.$route.prams.id取值// 2.通过query传参（这个会显示在url上面）this.$router.push(&#123; path: '/describe', //路由中配置的路径 query: &#123; id: id &#125;&#125;)//通过this.$route.query.id取值 vueCli 3.0 如何开启Gzip 压缩vuecli2.0跟3.0还是有点区别的！ 2.0Gzip相关配置1 在 config/index.js 中的1productionGzip: true //开启Gzip 2 然后：1npm install --save-dev compression-webpack-plugin 安装这个loader // "compression-webpack-plugin": "^1.1.11", 目前这边不报错的版本 3.0Gzip相关配置1 下载loader1npm i -D compression-webpack-plugin 2 修改vue.config.js12345678910111213141516171819const CompressionPlugin = require("compression-webpack-plugin")module.exports = &#123;configureWebpack:config=&gt;&#123; if(progress.env.NODE_ENV === 'production')&#123; return&#123; plugins: [ new CompressionPlugin(&#123; test:/\.js$|\.html$|.\css/, //匹配文件名 threshold: 10240,//对超过10k的数据压缩 deleteOriginalAssets: false //不删除源文件 &#125;) ] &#125; &#125; &#125;,&#125;]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[until.js]]></title>
    <url>%2F2019%2F05%2F10%2FbasicJs%2F</url>
    <content type="text"><![CDATA[url相关1234567891011121314151617181920// 获取url问号后面，name的值/*** *?id=123&amp;a=b* @return object*/export function urlParse()&#123; let url = window.location.search let obj = &#123;&#125;; let reg =/[?&amp;][^?&amp;]+=[^&amp;]+/g let Arr = url.match(reg) if(Arr)&#123; Arr.forEach((item)=&gt;&#123; let temArr = item.substring(1).split('=') let key = decodeURIComponent(temArr[0]) let value = decodeURIComponent(temArr[1]) obj[key] = value &#125;) &#125; return obj&#125; dom操作1234567891011121314151617181920212223242526272829303132333435// 判断是否有classexport function hasClass(el,className) &#123; let reg = new RegExp('(^|\\s)' + className + '(\\s|$)') return reg.test(el.className)&#125;// 添加classexport function addClass(el,className) &#123; if(hasClass(el, className)) &#123; return &#125; let newClass = el.className.split(' ') newClass.push(className); el.className = newClass.join(' ')&#125;// 移除classexport function removeClass(el,className) &#123; if (!hasClass(el, className)) &#123; return &#125; let newClass = el.className.split(' ') newClass = newClass.splice(className,1) el.className = newClass.join(' ')&#125;// 设置/获取 自定义data- 属性的值export function getData(el,name,val) &#123; const prefix = 'data-' if(val) &#123; return el.setAttribute(prefix + name, val) &#125; return el.getAttribute(prefix + name)&#125; date相关12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364// 获取 n天后的 时间function GetDateStr(AddDayCount) &#123; var dd = new Date() dd.setDate(dd.getDate()+AddDayCount) #获取AddDayCount天后的日期 var y = dd.getFullYear() var m = (dd.getMonth()+1)&lt;10?"0"+(dd.getMonth()+1):(dd.getMonth()+1) #获取当前月份的日期，不足10补0 var d = dd.getDate()&lt;10?"0"+dd.getDate():dd.getDate() #获取当前几号，不足10补0 return y+"-"+m+"-"+d; #return d+'/'+m+'/'+y&#125;// 距离发布经过的时长// example // fbtime('1509588277303') export function fbtime(obj)&#123; let sec = 60*1000 //1Minutes let hour = 60 * 60 * 1000; //1Hours // hour2 = 60 * 60 * 1000 * 2;//2Hours let day = 60 * 60 * 1000 * 24 // 1 day let day2 = 60 * 60 * 1000 * 24 * 2; //2 day if (obj) &#123; let dif = Date.now() - obj let hours = Math.floor(dif / 1000 / 60 / 60 % 24); let secs = Math.floor(dif / 1000 / 60 % 60); let today = new Date(Number(obj)); let tYear = today.getFullYear() let tMonth = today.getMonth(); let tDate = today.getDate(); tMonth = doHandleMonth(tMonth + 1); tDate = doHandleMonth(tDate); //var tHour= today.getHours(); //var tMinute= today.getMinutes(); //var tSecond= today.getSeconds(); if (dif&lt;day) &#123; if (dif&lt;hour) &#123; if (dif &lt; sec) &#123; obj = "刚刚"; &#125; else &#123; obj = secs + "分钟前" &#125; &#125;else if (dif &gt; hour) &#123; obj = hours + "小时前" &#125; else &#123; obj = "1小时" &#125; &#125; else if (dif &lt; day2) &#123; obj = "1天前" &#125; else &#123; obj = tYear+"-"+tMonth + "-" + tDate; &#125; &#125; return obj&#125;function doHandleMonth(month) &#123; let m = month if (month.toString().length == 1) &#123; m = "0" + month &#125; return m&#125; rem相关123456789101112131415161718192021222324252627// javascript!(function()&#123; var widthScreen = 750 function getScreenWidth()&#123; var dl = document.documentElement.clientWidth if(!dl)&#123; dl = 340 return dl &#125; return dl &#125; var widthDl = getScreenWidth() var sheet = (function()&#123; var style = document.createElement("style") style.appendChild(document.createTextNode("html &#123; font-size:" + (100*widthDl / widthScreen) + "px !important&#125;")) document.head.appendChild(style) return style.sheet &#125;)() window.addEventListener("resize",function()&#123; var dlResize = getScreenWidth() sheet.insertRule("html &#123; font-size:" + (100*dlResize / widthScreen) + "px !important&#125;", sheet.rules.length) sheet.deleteRule(0) &#125;)&#125;)() 本地存储相关12345678910111213141516export function setStorage(key,val)&#123; storage.set(key,val)&#125;export function getStorage(key)&#123; return storage.get(key)&#125;export function setSession(key,val)&#123; storage.session.set(key,val)&#125;export function getSession(key)&#123; return storage.session.get(key)&#125;]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>工具方法</tag>
        <tag>封装类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[冷知识]]></title>
    <url>%2F2019%2F05%2F10%2FtriviaIt%2F</url>
    <content type="text"><![CDATA[如何用CMD命令关闭被占用端口？查看全部端口1$ netstat -ano 查看特定端口被占用情况1$ netstat -ano|findstr （端口号） 关闭端口中的进程1$ taskkill /pid (进程号) /f 用谷歌等一些浏览器在网页上取色？打开浏览器的debug模式，用查找元素的箭头点击网页上任意一个dom元素，并在 右边出现的element.style { 这里写 backgournd:#fff;} 颜色任意确定之后，颜色那边会出现一个小色块，点击小色块，然后移动鼠标到你想取色的地方，点击一下，色块下方会出现相应的色值 移动端线上代码如何调试bug？非打包的代码，可以用fiddler来进行抓包，它能将线上的js文件代理到本地，主要用于线上调试，可将线上js代理到本地，调试本地js就能知道线上bug区域，十分方便！而用webpack、gulp等打包工具的多数是单页面的应用可以用到vConsole 前期用vConsole这些调试工具 兼容各个机型已到达线上代码bug量最小化 如何使用 vConsolecdn方式: 1234&lt;script src="https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js"&gt;&lt;/script&gt;&lt;script&gt; var vConsole = new VConsole()&lt;/script&gt; npm 方式: 先安装1npm install vconsole 再使用 12import VConsole from 'vconsole' //import vconsolelet vConsole = new VConsole() // 初始化 下载的crx文件无法拖入谷歌浏览器中？可将crx文件后缀改为rar，然后解压，打开浏览器开发者模式，添加插件 选择解压后的文件即可]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>冷门</tag>
        <tag>小技巧</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开篇]]></title>
    <url>%2F2019%2F05%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[楔子前不久，复联四刚刚结束~，漫威第三阶段刚刚落下帷幕，我谈不上是真正的漫威迷…但是确由衷的对整个系列出现在我的生活而感到庆幸….然后接下来就是五一了，其实也没怎么出去，主要在家照顾娃，去了一趟西溪湿地，也没呆多长的时间….后来突然想到既然自己是做IT的，为啥不搞个博客记录一下生活中的点点滴滴呢？于是乎~~~ 这几天在补课中…… 心路随着时光匆匆流过，我也快到了奔三的年纪，以前的同学朋友什么的联系较少，也有那么几个玩的好的尚在联系…感觉这些年变化蛮大的，尤其是25-30岁之间，心里面的想法慢慢就变得成熟一点吧，虽然我有些拒绝成熟，我也不愿意失去童真的心呀。 主要写啥主要写一些遇到的前端技术问题，以及生活方面的事情吧。。。恩，大概是这样。后面可能会加一些别的东西吧！（要是我想起来的话^_^）如上 敬礼！鞠躬~ 感谢]]></content>
      <categories>
        <category>记录生活</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>心情</tag>
      </tags>
  </entry>
</search>
